# Generated by Django 3.2.16 on 2023-12-07 15:24

from collections import defaultdict

from django.contrib.postgres.aggregates import ArrayAgg
from django.db import migrations, models
from django.db.models.functions import Coalesce

from swp.models.fields import DomainField
from swp.utils.migrations import get_queryset

EXTRA_TOP_LEVEL_DOMAINS = [
    'ox.ac.uk',
    'europa.eu',
    'house.gov',
    'senate.gov',
]


def set_domain(apps, schema_editor):  # pragma: no cover
    queryset = get_queryset(apps, schema_editor, 'swp', 'Thinktank')
    thinktanks = queryset.annotate(urls=ArrayAgg(Coalesce('scrapers__start_url', 'url'))).only('domain')

    if len(thinktanks) == 0:
        return 0

    from tldextract import TLDExtract

    extract = TLDExtract(extra_suffixes=EXTRA_TOP_LEVEL_DOMAINS)
    domains = defaultdict(list)

    for thinktank in thinktanks:
        thinktank.domains = {extract(url).registered_domain for url in thinktank.urls}

        if len(thinktank.domains) == 1:
            [thinktank.domain] = thinktank.domains

        domains[thinktank.domain].append(thinktank)

    disable = [
        thinktank.id
        for domain, thinktanks in domains.items()
        if len(thinktanks) > 1
        for thinktank in thinktanks
    ]

    queryset.filter(id__in=disable).update(is_active=False)

    update = [
        models.When(
            id__in=[thinktank.id for thinktank in thinktanks],
            then=models.Value(domain),
        ) for domain, thinktanks in domains.items()
    ]

    return queryset.update(domain=models.Case(*update))


class Migration(migrations.Migration):

    dependencies = [
        ('swp', '0041_user_pools'),
    ]

    atomic = False

    operations = [
        migrations.AddField(
            model_name='thinktank',
            name='domain',
            field=DomainField(default='', max_length=100, verbose_name='domain'),
            preserve_default=False,
        ),
        migrations.RunPython(
            code=set_domain,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AddConstraint(
            model_name='thinktank',
            constraint=models.UniqueConstraint(
                fields=['domain'],
                condition=models.Q(is_active=True),
                name='unique_active_domain',
            ),
        ),
    ]
