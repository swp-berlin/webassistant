# Generated by Django 4.0.10 on 2024-10-17 12:39

from collections import defaultdict

from django.db import migrations

from swp.db.functions import ArrayRemove
from swp.utils.migrations import get_queryset


def convert_static_tags_to_categories(apps, schema_editor):
    categories = get_queryset(apps, schema_editor, 'swp', 'Category')
    publications = get_queryset(apps, schema_editor, 'swp', 'Publication')
    queryset = get_queryset(apps, schema_editor, 'swp', 'Scraper')

    scrapers = defaultdict(list)
    tags = defaultdict(set)

    for scraper in queryset.only('data'):
        for tag, parent, resolver in get_tags(scraper.data):
            scrapers[scraper].append((parent, resolver))
            tags[tag].add(scraper)

    categories = categories.bulk_create([categories.model(name=tag) for tag in tags])
    mapping = remove_static_tags(categories, publications)

    remove_static_tag_resolvers(queryset, scrapers)
    create_scraper_categories(queryset.model.categories.through, categories, tags)
    create_publication_categories(publications.model.categories.through, mapping)

    return len(categories)


def get_tags(resolver, parent: list = None):
    yield from get_tag(resolver, parent)

    if resolvers := resolver.get('resolvers'):
        for resolver in resolvers:
            yield from get_tags(resolver, resolvers)


def get_tag(resolver, parent):
    if resolver_type := resolver.get('type'):
        if resolver_type == 'Tags':
            if sub_resolver := resolver.get('resolver'):
                if sub_resolver_type := sub_resolver.get('type'):
                    if sub_resolver_type == 'Static':
                        if value := sub_resolver.get('value'):
                            yield value, parent, resolver


def remove_static_tags(categories, publications):
    mapping = {}

    for category in categories:
        tag = category.name
        mapping[category] = ids = list(publications.filter(tags__contains=[tag]).values_list('id', flat=True))
        publications.filter(id__in=ids).update(tags=ArrayRemove('tags', tag))

    return mapping


def remove_static_tag_resolvers(queryset, scrapers):
    for scraper, todo in scrapers.items():
        for parent, resolver in todo:
            parent.remove(resolver)

    return queryset.bulk_update(scrapers, fields=['data'])


def create_scraper_categories(model, categories, tags):
    return model.objects.bulk_create([
        model(category=category, scraper=scraper)
        for category in categories
        for scraper in tags[category.name]
    ])


def create_publication_categories(model, objs):
    return model.objects.bulk_create([
        model(category=category, publication_id=publication_id)
        for category, publication_ids in objs.items()
        for publication_id in publication_ids
    ])


class Migration(migrations.Migration):

    dependencies = [
        ('swp', '0052_add_categories'),
    ]

    operations = [
        migrations.RunPython(convert_static_tags_to_categories),
    ]
